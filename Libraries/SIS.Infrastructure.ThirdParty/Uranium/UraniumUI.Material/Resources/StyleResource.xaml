<?xml version="1.0" encoding="UTF-8" ?>
<ResourceDictionary x:Class="UraniumUI.Material.Resources.StyleResource"
                    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
                    xmlns:local="clr-namespace:UraniumUI.Material.Resources"
                    xmlns:views="clr-namespace:UraniumUI.Views;assembly=UraniumUI"
                    xmlns:a="clr-namespace:UraniumUI.Material.Attachments"
                    xmlns:c="clr-namespace:UraniumUI.Material.Controls"
                    xmlns:t="clr-namespace:UraniumUI.Theming;assembly=UraniumUI"
                    xmlns:input="clr-namespace:InputKit.Shared.Controls;assembly=InputKit.Maui">
    <ResourceDictionary.MergedDictionaries>

        <ResourceDictionary>
            <Style TargetType="Page" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Background}, Dark={StaticResource BackgroundDark}}"/>
            </Style>

            <Style TargetType="Label" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnBackground},Dark={StaticResource OnBackgroundDark}}" />
            </Style>

            <Style TargetType="Frame" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Surface}, Dark={StaticResource SurfaceDark}}" />
            </Style>

            <Shadow x:Key="ShadowElevation0" Opacity="0" Offset="0,0" Radius="0" Brush="{StaticResource  ShadowBrush}" />
            <Shadow x:Key="ShadowElevation1" Opacity="0.2" Offset="2,2" Radius="4" Brush="{StaticResource ShadowBrush}" />
            <Shadow x:Key="ShadowElevation2" Opacity="0.4" Offset="4,4" Radius="8" Brush="{StaticResource ShadowBrush}" />
            <Shadow x:Key="ShadowElevation3" Opacity="0.6" Offset="6,6" Radius="12" Brush="{StaticResource ShadowBrush}" />
            <Shadow x:Key="ShadowElevation4" Opacity="0.6" Offset="8,8" Radius="16" Brush="{StaticResource ShadowBrush}" />
            <Shadow x:Key="ShadowElevation5" Opacity="0.8" Offset="10,10" Radius="20" Brush="{StaticResource ShadowBrush}" />

            <Style TargetType="View" Class="Elevation0" ApplyToDerivedTypes="True" >
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation0}" />
            </Style>
            <Style TargetType="View" Class="Elevation1" ApplyToDerivedTypes="True" >
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation1}" />
            </Style>
            <Style TargetType="View" Class="Elevation2" ApplyToDerivedTypes="True" >
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation2}" />
            </Style>
            <Style TargetType="View" Class="Elevation3" ApplyToDerivedTypes="True" >
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation3}" />
            </Style>
            <Style TargetType="View" Class="Elevation4" ApplyToDerivedTypes="True" >
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation3}" />
            </Style>
            <Style TargetType="View" Class="Elevation5" ApplyToDerivedTypes="True" >
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation3}" />
            </Style>

            <Style TargetType="Button" x:Key="BaseButtonStyle">
                <Setter Property="CornerRadius" Value="20" />
                <Setter Property="HeightRequest" Value="40" />
                <Setter Property="Padding" Value="24,0" />
            </Style>

            <Style TargetType="Button" BaseResourceKey="BaseButtonStyle" CanCascade="True"/>

            <Style TargetType="Button" Class="ElevatedButton" BaseResourceKey="BaseButtonStyle" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Surface}, Dark={StaticResource SurfaceDark}}" />
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation1}"/>
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="Shadow" Value="{StaticResource ShadowElevation0}" />
                                    <Setter Property="TextColor" Value="{StaticResource DisabledText}"/>
                                    <Setter Property="BackgroundColor" Value="{StaticResource DisabledBackground}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Hover">
                                <VisualState.Setters>
                                    <Setter Property="Shadow" Value="{StaticResource ShadowElevation2}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="Shadow" Value="{StaticResource ShadowElevation0}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="Button" Class="FilledButton" BaseResourceKey="BaseButtonStyle" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnPrimary}, Dark={StaticResource OnPrimaryDark}}" />
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation0}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="Hover">
                                <VisualState.Setters>
                                    <Setter Property="Shadow" Value="{StaticResource ShadowElevation1}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="TextColor" Value="{StaticResource DisabledText}"/>
                                    <Setter Property="BackgroundColor" Value="{StaticResource DisabledBackground}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="Button" Class="FilledTonalButton" BaseResourceKey="BaseButtonStyle" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource SecondaryContainer}, Dark={StaticResource SecondaryContainerDark}}" />
                <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="1" />
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnSecondaryContainer}, Dark={StaticResource OnSecondaryContainerDark}}" />
                <Setter Property="Shadow" Value="{StaticResource ShadowElevation0}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="TextColor" Value="{StaticResource DisabledText}"/>
                                    <Setter Property="BackgroundColor" Value="{StaticResource DisabledBackground}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Hover">
                                <VisualState.Setters>
                                    <Setter Property="Shadow" Value="{StaticResource ShadowElevation1}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.8" />
                                    <Setter Property="Shadow" Value="{StaticResource ShadowElevation0}"/>
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="Button" Class="OutlinedButton" BaseResourceKey="BaseButtonStyle" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource  Primary}, Dark={StaticResource  PrimaryDark}}" />
                <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0" />
                <Setter Property="BorderColor" Value="{AppThemeBinding Light={StaticResource Outline}, Dark={StaticResource OutlineDark}}" />
                <Setter Property="BorderWidth" Value="1" />
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource  Primary}, Dark={StaticResource  PrimaryDark}}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0" />
                                    <Setter Property="TextColor" Value="{StaticResource Gray300}"/>
                                    <Setter Property="BorderColor" Value="{StaticResource Gray100}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Hover">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.1" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.16" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="Button" Class="TextButton" BaseResourceKey="BaseButtonStyle" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0" />
                <Setter Property="BorderWidth" Value="0" />
                <Setter Property="Margin" Value="0,2"/>
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Primary},Dark={StaticResource PrimaryDark}}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0" />
                                    <Setter Property="TextColor" Value="{StaticResource DisabledText}"/>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Hover">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.1" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.16" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="BoxView" Class="Divider" CanCascade="True">
                <Setter Property="HeightRequest" Value="1" />
                <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource OutlineVariant}, Dark={StaticResource OutlineVariantDark}}" />
                <Setter Property="Margin" Value="16,8"/>
            </Style>

            <Style TargetType="input:CheckBox" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="Type" Value="Material" />
                <Setter Property="BorderColor" Value="{AppThemeBinding Light={StaticResource Outline}, Dark={StaticResource  OutlineDark}}" />
                <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}" />
                <Setter Property="ValidationColor" Value="{AppThemeBinding Light={StaticResource Error}, Dark={StaticResource ErrorDark}}"/>
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="1"/>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="0.6" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="input:RadioButton" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}" />
                <Setter Property="CircleColor" Value="{AppThemeBinding Light={StaticResource  Outline}, Dark={StaticResource  OutlineDark}}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="1"/>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="0.6" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="input:SelectionView" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource Secondary}, Dark={StaticResource SecondaryDark}}" />
            </Style>

            <Style TargetType="c:RadioButton" Class="CheckRadioButton" CanCascade="True">
                <Setter Property="SelectedIconGeomerty" Value="{x:Static input:PredefinedShapes.CheckCircle}" />
            </Style>

            <Style TargetType="a:BottomSheetView" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Surface},Dark={StaticResource SurfaceDark}}"/>
            </Style>

            <Style TargetType="a:BackdropView" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource Gray950}}"/>
            </Style>

            <Style TargetType="c:DataGrid" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource  Surface},Dark={StaticResource  SurfaceDark}}" />
                <Setter Property="LineSeparatorColor" Value="{StaticResource Gray300}"/>
                <Setter Property="SelectionColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
            </Style>

            <Style TargetType="c:InputField" ApplyToDerivedTypes="True" x:Key="InputFieldBaseStyle" CanCascade="True">
                <Setter Property="Opacity" Value="1"/>
                <Setter Property="AccentColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="BorderColor" Value="{AppThemeBinding Light={StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}" />
                <Setter Property="TitleColor" Value="{AppThemeBinding Light={StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="0.6" />
                                    <Setter Property="BorderColor" Value="{StaticResource DisabledText}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="c:InputField" ApplyToDerivedTypes="True" BaseResourceKey="InputFieldBaseStyle" CanCascade="True"/>

            <Style TargetType="c:TextField" BaseResourceKey="InputFieldBaseStyle"  CanCascade="True">
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}" />
            </Style>

            <Style TargetType="c:AutoCompleteTextField" BaseResourceKey="InputFieldBaseStyle" CanCascade="True">
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}" />
            </Style>

            <Style TargetType="views:StatefulContentView" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="PointerOver">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="0.8" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="1.0" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="Opacity" Value="0.5" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="c:ButtonView" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="StrokeShape" Value="{RoundRectangle CornerRadius=20}"/>
                <Setter Property="t:CascadingStyle.Resources">
                    <Setter.Value>
                        <ResourceDictionary>
                            <Style TargetType="Label">
                                <Setter Property="TextColor" Value="{DynamicResource OnPrimary}" />
                            </Style>
                        </ResourceDictionary>
                    </Setter.Value>
                </Setter>
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="PointerOver">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.9" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.8" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="c:ButtonView" Class="TreeViewExpandButton"  CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
                <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0" />
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="PointerOver">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.1" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter Property="t:DynamicTint.BackgroundColorOpacity" Value="0.15" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style TargetType="View" Class="PrimaryContainer" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource PrimaryContainer}, Dark={StaticResource PrimaryContainerDark}}" />
                <Setter Property="t:CascadingStyle.Resources">
                    <ResourceDictionary>
                        <Style TargetType="Label">
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnPrimaryContainer},Dark={StaticResource OnPrimaryContainerDark}}" />
                        </Style>
                    </ResourceDictionary>
                </Setter>
            </Style>

            <Style TargetType="View" Class="SecondaryContainer" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource SecondaryContainer}, Dark={StaticResource SecondaryContainerDark}}" />
                <Setter Property="t:CascadingStyle.Resources">
                    <ResourceDictionary>
                        <Style TargetType="Label">
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnSecondaryContainer},Dark={StaticResource OnSecondaryContainerDark}}" />
                        </Style>
                    </ResourceDictionary>
                </Setter>
            </Style>

            <Style TargetType="View" Class="TertiaryContainer" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource TertiaryContainer}, Dark={StaticResource TertiaryContainerDark}}" />
                <Setter Property="t:CascadingStyle.Resources">
                    <ResourceDictionary>
                        <Style TargetType="Label">
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnTertiaryContainer},Dark={StaticResource OnTertiaryContainerDark}}" />
                        </Style>
                    </ResourceDictionary>
                </Setter>
            </Style>

            <Style TargetType="View" Class="ErrorContainer" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource ErrorContainer}, Dark={StaticResource ErrorContainerDark}}" />
                <Setter Property="t:CascadingStyle.Resources">
                    <ResourceDictionary>
                        <Style TargetType="Label">
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource OnErrorContainer},Dark={StaticResource OnErrorContainerDark}}" />
                        </Style>
                    </ResourceDictionary>
                </Setter>
            </Style>

            <Style TargetType="View" Class="SurfaceContainer" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Surface}, Dark={StaticResource SurfaceDark}}" />
            </Style>

            <Style TargetType="Border" Class="Rounded" ApplyToDerivedTypes="True" CanCascade="True">
                <Setter Property="StrokeShape" Value="RoundRectangle 8" />
            </Style>

            <Style TargetType="Path" CanCascade="True">
                <Setter Property="Fill" Value="{AppThemeBinding {StaticResource OnSurface}, Dark={StaticResource OnSurfaceDark}}"></Setter>
            </Style>
            
            <Style TargetType="FontImageSource" CanCascade="True">
                <Setter Property="Color" Value="{AppThemeBinding {StaticResource OnBackground}, Dark={StaticResource OnBackgroundDark}}"></Setter>
            </Style>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>